name: Make Installer Packages from Builds
on: 
  workflow_call:
    inputs:
      artifact-name:
        description: 'The artifact containing the build to package'
        required: true
        type: string
      version:
        description: 'The version of the build to package'
        required: true
        type: string
      revision:
        description: 'The revision of the build to package'
        required: true
        type: string
      run-id:
        description: 'The run id that made the build'
        required: true
        type: string
  workflow_dispatch:
    inputs:
      artifact-name:
        description: 'The artifact containing the build to package'
        required: true
        type: string
      version:
        description: 'The version of the build to package'
        required: true
        type: string
      revision:
        description: 'The revision of the build to package'
        required: true
        type: string
      run-id:
        description: 'The run id that made the build'
        required: true
        type: string
    
jobs:
  package:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      id-token: write
      attestations: write
    outputs:
      artifact-name: ${{ steps.set-output.outputs.artifact-name }}
      version: ${{ steps.set-output.outputs.version }}
      revision: ${{ steps.set-output.outputs.revision }}
      run-id: ${{ steps.set-output.outputs.run-id }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ github.event.inputs.artifact-name }}
          run-id: ${{ github.event.inputs.run-id }}
          github-token: ${{ secrets.PERSONAL_TOKEN }}
          repository: ${{ github.repository }}

      - name: Unpack artifact
        run: |
          mkdir -p packaging
          tar -xzf ${{ github.event.inputs.artifact-name }} -C packaging
          rm ${{ github.event.inputs.artifact-name }}

      - name: setup fpm
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3'
          bundler-cache: true
          rubygems: default
      - run: gem install dotenv fpm

      - name: Write shared fpm config
        run: |
          cat > .fpm <<EOF
          -s dir
          -n protonmail-bridge
          -v ${{ github.event.inputs.version }}
          --verbose
          --force
          --chdir ${{ github.workspace }}/packaging
          --architecture aarch64
          --provides protonmail-bridge
          --description "Proton Mail Bridge is a desktop application that runs in the background encrypting and decrypting messages as they enter and leave your computer."
          --license "GPLv3"
          --maintainer "Proton AG (Proton Mail Bridge developers) <bridge@protonmail.ch> packed by ArchitektApx"
          --vendor "Proton AG"
          --url "https://proton.me/mail/bridge"
          proton-bridge=/usr/bin/protonmail-bridge proton-bridge.desktop=/usr/share/applications/protonmail-bridge.desktop logo.svg=/usr/share/icons/hicolor/scalable/apps/protonmail-bridge.svg Changelog.md=/usr/share/doc/protonmail/bridge/Changelog.md LICENSE=/usr/share/doc/protonmail/bridge/LICENSE .=/usr/lib/protonmail/bridge
          EOF

          # debug output to check if the file was written correctly
          echo "::debug::$(cat .fpm)"

      - name: Package RPM
        run: |
          echo "::debug::$(ls -la packaging)"
          RPM_DEPENDS="dejavu-sans-fonts, fontconfig, glib2, glibc, libEGL, libgcc, libglvnd-glx, libsecret, libstdc++, libxkbcommon-x11"
          fpm -t rpm --rpm-tag '%define _build_id_links none' --rpm-tag '%undefine _missing_build_ids_terminate_build' --depends "$RPM_DEPENDS" --rpm-auto-add-directories --rpm-summary "Proton Mail Bridge"
          RPMFILE=$(find . -name '*.rpm' -type f)
          tar -czf $RPMFILE.tar.gz $RPMFILE

      - name: Package Deb
        run: |
          echo "::debug::$(ls -la packaging)"
          DEB_DEPENDS="libegl1, libc6, libsecret-1-0, libglib2.0-0, libstdc++6, libgcc1, libpulse-mainloop-glib0, fonts-dejavu"
          DEB_SUGGESTS="gnome-keyring, pass"
          fpm -t deb --depends "$DEB_DEPENDS" --deb-suggests "$DEB_SUGGESTS"
          DEBFILE=$(find . -name '*.deb' -type f)
          tar -czf $DEBFILE.tar.gz $DEBFILE

      - name: Package Cli only
        run: |
          FILENAME="protonmail-bridge-cli-${{ github.event.inputs.version }}-${{ github.event.inputs.revision }}.aarch64.tar.gz"
          cp packaging/bridge bridge
          tar -czf $FILENAME bridge

      - name: Make sha256sums textfile and tar everything together
        run: |
          sha256sum *.rpm *.deb *.tar.gz > sha256sums.txt
          tar -czf ReleaseBundle.tar.gz *.tar.gz sha256sums.txt

      - name: Export GitHub Actions cache environment variables
        uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - name: attest release bundle
        uses: actions/attest-build-provenance@v1
        with:

          subject-path: "*.tar.gz, *.txt, *.rpm, *.deb"

      - name: Upload Release Bundle
        id: upload
        uses: actions/upload-artifact@v4
        with:
          name: ReleaseBundle
          path: ReleaseBundle.tar.gz

      - name: Set output
        id: set-output
        run: |
          echo "artifact-name=ReleaseBundle.tar.gz" >> $GITHUB_OUTPUT
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          echo "revision=${{ github.event.inputs.revision }}" >> $GITHUB_OUTPUT
          echo "run-id=${{ github.run_id }}" >> $GITHUB_OUTPUT